name: Verify Attestation

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to verify attestation for'
        required: true
        type: string
        default: 'main'

jobs:
  verify-attestation:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout specific commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.commit_sha }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: go mod download

    - name: Get commit information
      id: commit-info
      run: |
        echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Download attestation from release
      id: download-attestation
      run: |
        echo "üîç Looking for attestation release for commit ${{ steps.commit-info.outputs.sha }}..."
        
        # Get the short SHA for this commit
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        
        # Try to download the attestation from the release
        RELEASE_TAG="attestation-$SHORT_SHA"
        ASSET_NAME="github-oidc-attestation.json"
        
        echo "üì• Downloading attestation from release $RELEASE_TAG..."
        
        # Create attestations directory
        mkdir -p attestations
        
        # Use GitHub API to download the release asset
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG"
        
        echo "üîç Release API URL: $RELEASE_URL"
        echo "üîç Looking for asset: $ASSET_NAME"
        
        # Get release info and find the asset
        RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$RELEASE_URL")
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to fetch release info from GitHub API"
          exit 1
        fi
        
        # Check if release exists
        RELEASE_EXISTS=$(echo "$RELEASE_INFO" | jq -r '.id // empty')
        if [ -z "$RELEASE_EXISTS" ]; then
          echo "‚ùå Release not found: $RELEASE_TAG"
          echo "üìÑ API Response: $RELEASE_INFO"
          exit 1
        fi
        
        # Find the asset and get its ID
        ASSET_INFO=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name=="'$ASSET_NAME'") | {id: .id, name: .name, size: .size}')
        
        if [ -z "$ASSET_INFO" ] || [ "$ASSET_INFO" = "null" ]; then
          echo "‚ùå Asset not found: $ASSET_NAME"
          echo "üìÑ Available assets in release:"
          echo "$RELEASE_INFO" | jq -r '.assets[] | "  - \(.name) (\(.size) bytes)"'
          exit 1
        fi
        
        ASSET_ID=$(echo "$ASSET_INFO" | jq -r '.id')
        ASSET_SIZE=$(echo "$ASSET_INFO" | jq -r '.size')
        
        echo "‚úÖ Found asset: $ASSET_NAME (ID: $ASSET_ID, Size: $ASSET_SIZE bytes)"
        
        # Use direct GitHub API download instead of browser download URL
        ASSETS_URL="https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
        
        echo "üîç Asset download URL: $ASSETS_URL"
        
        if [ -n "$ASSET_ID" ]; then
          echo "üì• Downloading from: $ASSETS_URL"
          
          # Download with better error handling and redirect following
          curl -L -f -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            -H "User-Agent: GitHub-Actions-Verify-Workflow" \
            "$ASSETS_URL" -o "attestations/$ASSET_NAME"
          
          CURL_EXIT_CODE=$?
          
          # Verify the file was downloaded correctly
          if [ -f "attestations/$ASSET_NAME" ] && [ $CURL_EXIT_CODE -eq 0 ]; then
            FILE_SIZE=$(wc -c < "attestations/$ASSET_NAME")
            echo "üìÅ File size: $FILE_SIZE bytes"
            
            # Check if file is suspiciously small (less than 100 bytes)
            if [ $FILE_SIZE -lt 100 ]; then
              echo "‚ö†Ô∏è  Warning: File seems too small, checking content..."
              echo "üìÑ First 200 characters: $(head -c 200 "attestations/$ASSET_NAME")"
              
              # Check if it's an HTML error page
              if grep -q "<html\|<!DOCTYPE\|<title>" "attestations/$ASSET_NAME"; then
                echo "‚ùå Downloaded HTML error page instead of JSON file"
                echo "üìÑ Content preview: $(head -c 500 "attestations/$ASSET_NAME")"
                exit 1
              fi
            else
              echo "üìÑ First few characters: $(head -c 100 "attestations/$ASSET_NAME")"
            fi
            
            echo "‚úÖ Attestation downloaded successfully from release"
            echo "attestation_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå File download failed - curl exit code: $CURL_EXIT_CODE"
            if [ -f "attestations/$ASSET_NAME" ]; then
              echo "üìÑ Downloaded content (first 500 chars): $(head -c 500 "attestations/$ASSET_NAME")"
            fi
            
            echo "‚ùå Download failed - no fallback method available"
            exit 1
          fi
        else
          echo "‚ùå No attestation release found for commit ${{ steps.commit-info.outputs.sha }}"
          echo "‚ùå Release URL: $RELEASE_URL"
          echo "‚ùå Asset name: $ASSET_NAME"
          echo "attestation_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Verify attestation
      id: verification
      run: |
        echo "üîç Verifying attestation for commit ${{ steps.commit-info.outputs.sha }}..."
        
        # Run verification using go run
        go run ./cmd/verify_attestation \
          --attestation-file attestations/github-oidc-attestation.json
        
        echo "‚úÖ Attestation verification completed successfully"

    - name: Comment on commit (if possible)
      run: |
        echo "üîç Verification completed for commit ${{ steps.commit-info.outputs.short_sha }}"
        echo "üìã Summary: Attestation verified successfully"
        echo "üìÅ Artifacts: Available in workflow run artifacts"
